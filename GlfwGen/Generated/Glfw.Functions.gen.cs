// <auto-generated>
// This file is generated by GlfwGenerator
// </auto-generated>
using System;
using System.Runtime.InteropServices;

namespace GlfwGen
{
    public static unsafe partial class GlfwNative
    {
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwInit_t();
        private static glfwInit_t s_glfwInit = LoadFunction<glfwInit_t>("glfwInit");
        public static int glfwInit() => s_glfwInit();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwTerminate_t();
        private static glfwTerminate_t s_glfwTerminate = LoadFunction<glfwTerminate_t>("glfwTerminate");
        public static void glfwTerminate() => s_glfwTerminate();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetVersion_t(int* major, int* minor, int* rev);
        private static glfwGetVersion_t s_glfwGetVersion = LoadFunction<glfwGetVersion_t>("glfwGetVersion");
        public static void glfwGetVersion(int* major, int* minor, int* rev) => s_glfwGetVersion(major, minor, rev);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate string glfwGetVersionString_t();
        private static glfwGetVersionString_t s_glfwGetVersionString = LoadFunction<glfwGetVersionString_t>("glfwGetVersionString");
        public static string glfwGetVersionString() => s_glfwGetVersionString();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWerrorfun glfwSetErrorCallback_t(GLFWerrorfun cbfun);
        private static glfwSetErrorCallback_t s_glfwSetErrorCallback = LoadFunction<glfwSetErrorCallback_t>("glfwSetErrorCallback");
        public static GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun cbfun) => s_glfwSetErrorCallback(cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWmonitor** glfwGetMonitors_t(int* count);
        private static glfwGetMonitors_t s_glfwGetMonitors = LoadFunction<glfwGetMonitors_t>("glfwGetMonitors");
        public static GLFWmonitor** glfwGetMonitors(int* count) => s_glfwGetMonitors(count);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWmonitor glfwGetPrimaryMonitor_t();
        private static glfwGetPrimaryMonitor_t s_glfwGetPrimaryMonitor = LoadFunction<glfwGetPrimaryMonitor_t>("glfwGetPrimaryMonitor");
        public static GLFWmonitor glfwGetPrimaryMonitor() => s_glfwGetPrimaryMonitor();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetMonitorPos_t(GLFWmonitor monitor, int* xpos, int* ypos);
        private static glfwGetMonitorPos_t s_glfwGetMonitorPos = LoadFunction<glfwGetMonitorPos_t>("glfwGetMonitorPos");
        public static void glfwGetMonitorPos(GLFWmonitor monitor, int* xpos, int* ypos) => s_glfwGetMonitorPos(monitor, xpos, ypos);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetMonitorPhysicalSize_t(GLFWmonitor monitor, int* widthMM, int* heightMM);
        private static glfwGetMonitorPhysicalSize_t s_glfwGetMonitorPhysicalSize = LoadFunction<glfwGetMonitorPhysicalSize_t>("glfwGetMonitorPhysicalSize");
        public static void glfwGetMonitorPhysicalSize(GLFWmonitor monitor, int* widthMM, int* heightMM) => s_glfwGetMonitorPhysicalSize(monitor, widthMM, heightMM);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate string glfwGetMonitorName_t(GLFWmonitor monitor);
        private static glfwGetMonitorName_t s_glfwGetMonitorName = LoadFunction<glfwGetMonitorName_t>("glfwGetMonitorName");
        public static string glfwGetMonitorName(GLFWmonitor monitor) => s_glfwGetMonitorName(monitor);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWmonitorfun glfwSetMonitorCallback_t(GLFWmonitorfun cbfun);
        private static glfwSetMonitorCallback_t s_glfwSetMonitorCallback = LoadFunction<glfwSetMonitorCallback_t>("glfwSetMonitorCallback");
        public static GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun cbfun) => s_glfwSetMonitorCallback(cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWvidmode* glfwGetVideoModes_t(GLFWmonitor monitor, int* count);
        private static glfwGetVideoModes_t s_glfwGetVideoModes = LoadFunction<glfwGetVideoModes_t>("glfwGetVideoModes");
        public static GLFWvidmode* glfwGetVideoModes(GLFWmonitor monitor, int* count) => s_glfwGetVideoModes(monitor, count);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWvidmode* glfwGetVideoMode_t(GLFWmonitor monitor);
        private static glfwGetVideoMode_t s_glfwGetVideoMode = LoadFunction<glfwGetVideoMode_t>("glfwGetVideoMode");
        public static GLFWvidmode* glfwGetVideoMode(GLFWmonitor monitor) => s_glfwGetVideoMode(monitor);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetGamma_t(GLFWmonitor monitor, float gamma);
        private static glfwSetGamma_t s_glfwSetGamma = LoadFunction<glfwSetGamma_t>("glfwSetGamma");
        public static void glfwSetGamma(GLFWmonitor monitor, float gamma) => s_glfwSetGamma(monitor, gamma);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWgammaramp* glfwGetGammaRamp_t(GLFWmonitor monitor);
        private static glfwGetGammaRamp_t s_glfwGetGammaRamp = LoadFunction<glfwGetGammaRamp_t>("glfwGetGammaRamp");
        public static GLFWgammaramp* glfwGetGammaRamp(GLFWmonitor monitor) => s_glfwGetGammaRamp(monitor);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetGammaRamp_t(GLFWmonitor monitor, GLFWgammaramp* ramp);
        private static glfwSetGammaRamp_t s_glfwSetGammaRamp = LoadFunction<glfwSetGammaRamp_t>("glfwSetGammaRamp");
        public static void glfwSetGammaRamp(GLFWmonitor monitor, GLFWgammaramp* ramp) => s_glfwSetGammaRamp(monitor, ramp);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwDefaultWindowHints_t();
        private static glfwDefaultWindowHints_t s_glfwDefaultWindowHints = LoadFunction<glfwDefaultWindowHints_t>("glfwDefaultWindowHints");
        public static void glfwDefaultWindowHints() => s_glfwDefaultWindowHints();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwWindowHint_t(int hint, int value);
        private static glfwWindowHint_t s_glfwWindowHint = LoadFunction<glfwWindowHint_t>("glfwWindowHint");
        public static void glfwWindowHint(int hint, int value) => s_glfwWindowHint(hint, value);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindow glfwCreateWindow_t(int width, int height, string title, GLFWmonitor monitor, GLFWwindow share);
        private static glfwCreateWindow_t s_glfwCreateWindow = LoadFunction<glfwCreateWindow_t>("glfwCreateWindow");
        public static GLFWwindow glfwCreateWindow(int width, int height, string title, GLFWmonitor monitor, GLFWwindow share) => s_glfwCreateWindow(width, height, title, monitor, share);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwDestroyWindow_t(GLFWwindow window);
        private static glfwDestroyWindow_t s_glfwDestroyWindow = LoadFunction<glfwDestroyWindow_t>("glfwDestroyWindow");
        public static void glfwDestroyWindow(GLFWwindow window) => s_glfwDestroyWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwWindowShouldClose_t(GLFWwindow window);
        private static glfwWindowShouldClose_t s_glfwWindowShouldClose = LoadFunction<glfwWindowShouldClose_t>("glfwWindowShouldClose");
        public static int glfwWindowShouldClose(GLFWwindow window) => s_glfwWindowShouldClose(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowShouldClose_t(GLFWwindow window, int value);
        private static glfwSetWindowShouldClose_t s_glfwSetWindowShouldClose = LoadFunction<glfwSetWindowShouldClose_t>("glfwSetWindowShouldClose");
        public static void glfwSetWindowShouldClose(GLFWwindow window, int value) => s_glfwSetWindowShouldClose(window, value);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowTitle_t(GLFWwindow window, string title);
        private static glfwSetWindowTitle_t s_glfwSetWindowTitle = LoadFunction<glfwSetWindowTitle_t>("glfwSetWindowTitle");
        public static void glfwSetWindowTitle(GLFWwindow window, string title) => s_glfwSetWindowTitle(window, title);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowIcon_t(GLFWwindow window, int count, GLFWimage* images);
        private static glfwSetWindowIcon_t s_glfwSetWindowIcon = LoadFunction<glfwSetWindowIcon_t>("glfwSetWindowIcon");
        public static void glfwSetWindowIcon(GLFWwindow window, int count, GLFWimage* images) => s_glfwSetWindowIcon(window, count, images);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetWindowPos_t(GLFWwindow window, int* xpos, int* ypos);
        private static glfwGetWindowPos_t s_glfwGetWindowPos = LoadFunction<glfwGetWindowPos_t>("glfwGetWindowPos");
        public static void glfwGetWindowPos(GLFWwindow window, int* xpos, int* ypos) => s_glfwGetWindowPos(window, xpos, ypos);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowPos_t(GLFWwindow window, int xpos, int ypos);
        private static glfwSetWindowPos_t s_glfwSetWindowPos = LoadFunction<glfwSetWindowPos_t>("glfwSetWindowPos");
        public static void glfwSetWindowPos(GLFWwindow window, int xpos, int ypos) => s_glfwSetWindowPos(window, xpos, ypos);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetWindowSize_t(GLFWwindow window, int* width, int* height);
        private static glfwGetWindowSize_t s_glfwGetWindowSize = LoadFunction<glfwGetWindowSize_t>("glfwGetWindowSize");
        public static void glfwGetWindowSize(GLFWwindow window, int* width, int* height) => s_glfwGetWindowSize(window, width, height);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowSizeLimits_t(GLFWwindow window, int minwidth, int minheight, int maxwidth, int maxheight);
        private static glfwSetWindowSizeLimits_t s_glfwSetWindowSizeLimits = LoadFunction<glfwSetWindowSizeLimits_t>("glfwSetWindowSizeLimits");
        public static void glfwSetWindowSizeLimits(GLFWwindow window, int minwidth, int minheight, int maxwidth, int maxheight) => s_glfwSetWindowSizeLimits(window, minwidth, minheight, maxwidth, maxheight);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowAspectRatio_t(GLFWwindow window, int numer, int denom);
        private static glfwSetWindowAspectRatio_t s_glfwSetWindowAspectRatio = LoadFunction<glfwSetWindowAspectRatio_t>("glfwSetWindowAspectRatio");
        public static void glfwSetWindowAspectRatio(GLFWwindow window, int numer, int denom) => s_glfwSetWindowAspectRatio(window, numer, denom);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowSize_t(GLFWwindow window, int width, int height);
        private static glfwSetWindowSize_t s_glfwSetWindowSize = LoadFunction<glfwSetWindowSize_t>("glfwSetWindowSize");
        public static void glfwSetWindowSize(GLFWwindow window, int width, int height) => s_glfwSetWindowSize(window, width, height);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetFramebufferSize_t(GLFWwindow window, int* width, int* height);
        private static glfwGetFramebufferSize_t s_glfwGetFramebufferSize = LoadFunction<glfwGetFramebufferSize_t>("glfwGetFramebufferSize");
        public static void glfwGetFramebufferSize(GLFWwindow window, int* width, int* height) => s_glfwGetFramebufferSize(window, width, height);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetWindowFrameSize_t(GLFWwindow window, int* left, int* top, int* right, int* bottom);
        private static glfwGetWindowFrameSize_t s_glfwGetWindowFrameSize = LoadFunction<glfwGetWindowFrameSize_t>("glfwGetWindowFrameSize");
        public static void glfwGetWindowFrameSize(GLFWwindow window, int* left, int* top, int* right, int* bottom) => s_glfwGetWindowFrameSize(window, left, top, right, bottom);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwIconifyWindow_t(GLFWwindow window);
        private static glfwIconifyWindow_t s_glfwIconifyWindow = LoadFunction<glfwIconifyWindow_t>("glfwIconifyWindow");
        public static void glfwIconifyWindow(GLFWwindow window) => s_glfwIconifyWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwRestoreWindow_t(GLFWwindow window);
        private static glfwRestoreWindow_t s_glfwRestoreWindow = LoadFunction<glfwRestoreWindow_t>("glfwRestoreWindow");
        public static void glfwRestoreWindow(GLFWwindow window) => s_glfwRestoreWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwMaximizeWindow_t(GLFWwindow window);
        private static glfwMaximizeWindow_t s_glfwMaximizeWindow = LoadFunction<glfwMaximizeWindow_t>("glfwMaximizeWindow");
        public static void glfwMaximizeWindow(GLFWwindow window) => s_glfwMaximizeWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwShowWindow_t(GLFWwindow window);
        private static glfwShowWindow_t s_glfwShowWindow = LoadFunction<glfwShowWindow_t>("glfwShowWindow");
        public static void glfwShowWindow(GLFWwindow window) => s_glfwShowWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwHideWindow_t(GLFWwindow window);
        private static glfwHideWindow_t s_glfwHideWindow = LoadFunction<glfwHideWindow_t>("glfwHideWindow");
        public static void glfwHideWindow(GLFWwindow window) => s_glfwHideWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwFocusWindow_t(GLFWwindow window);
        private static glfwFocusWindow_t s_glfwFocusWindow = LoadFunction<glfwFocusWindow_t>("glfwFocusWindow");
        public static void glfwFocusWindow(GLFWwindow window) => s_glfwFocusWindow(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWmonitor glfwGetWindowMonitor_t(GLFWwindow window);
        private static glfwGetWindowMonitor_t s_glfwGetWindowMonitor = LoadFunction<glfwGetWindowMonitor_t>("glfwGetWindowMonitor");
        public static GLFWmonitor glfwGetWindowMonitor(GLFWwindow window) => s_glfwGetWindowMonitor(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowMonitor_t(GLFWwindow window, GLFWmonitor monitor, int xpos, int ypos, int width, int height, int refreshRate);
        private static glfwSetWindowMonitor_t s_glfwSetWindowMonitor = LoadFunction<glfwSetWindowMonitor_t>("glfwSetWindowMonitor");
        public static void glfwSetWindowMonitor(GLFWwindow window, GLFWmonitor monitor, int xpos, int ypos, int width, int height, int refreshRate) => s_glfwSetWindowMonitor(window, monitor, xpos, ypos, width, height, refreshRate);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwGetWindowAttrib_t(GLFWwindow window, int attrib);
        private static glfwGetWindowAttrib_t s_glfwGetWindowAttrib = LoadFunction<glfwGetWindowAttrib_t>("glfwGetWindowAttrib");
        public static int glfwGetWindowAttrib(GLFWwindow window, int attrib) => s_glfwGetWindowAttrib(window, attrib);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetWindowUserPointer_t(GLFWwindow window, void* pointer);
        private static glfwSetWindowUserPointer_t s_glfwSetWindowUserPointer = LoadFunction<glfwSetWindowUserPointer_t>("glfwSetWindowUserPointer");
        public static void glfwSetWindowUserPointer(GLFWwindow window, void* pointer) => s_glfwSetWindowUserPointer(window, pointer);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void* glfwGetWindowUserPointer_t(GLFWwindow window);
        private static glfwGetWindowUserPointer_t s_glfwGetWindowUserPointer = LoadFunction<glfwGetWindowUserPointer_t>("glfwGetWindowUserPointer");
        public static void* glfwGetWindowUserPointer(GLFWwindow window) => s_glfwGetWindowUserPointer(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowposfun glfwSetWindowPosCallback_t(GLFWwindow window, GLFWwindowposfun cbfun);
        private static glfwSetWindowPosCallback_t s_glfwSetWindowPosCallback = LoadFunction<glfwSetWindowPosCallback_t>("glfwSetWindowPosCallback");
        public static GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow window, GLFWwindowposfun cbfun) => s_glfwSetWindowPosCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowsizefun glfwSetWindowSizeCallback_t(GLFWwindow window, GLFWwindowsizefun cbfun);
        private static glfwSetWindowSizeCallback_t s_glfwSetWindowSizeCallback = LoadFunction<glfwSetWindowSizeCallback_t>("glfwSetWindowSizeCallback");
        public static GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow window, GLFWwindowsizefun cbfun) => s_glfwSetWindowSizeCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowclosefun glfwSetWindowCloseCallback_t(GLFWwindow window, GLFWwindowclosefun cbfun);
        private static glfwSetWindowCloseCallback_t s_glfwSetWindowCloseCallback = LoadFunction<glfwSetWindowCloseCallback_t>("glfwSetWindowCloseCallback");
        public static GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow window, GLFWwindowclosefun cbfun) => s_glfwSetWindowCloseCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowrefreshfun glfwSetWindowRefreshCallback_t(GLFWwindow window, GLFWwindowrefreshfun cbfun);
        private static glfwSetWindowRefreshCallback_t s_glfwSetWindowRefreshCallback = LoadFunction<glfwSetWindowRefreshCallback_t>("glfwSetWindowRefreshCallback");
        public static GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow window, GLFWwindowrefreshfun cbfun) => s_glfwSetWindowRefreshCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowfocusfun glfwSetWindowFocusCallback_t(GLFWwindow window, GLFWwindowfocusfun cbfun);
        private static glfwSetWindowFocusCallback_t s_glfwSetWindowFocusCallback = LoadFunction<glfwSetWindowFocusCallback_t>("glfwSetWindowFocusCallback");
        public static GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow window, GLFWwindowfocusfun cbfun) => s_glfwSetWindowFocusCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindowiconifyfun glfwSetWindowIconifyCallback_t(GLFWwindow window, GLFWwindowiconifyfun cbfun);
        private static glfwSetWindowIconifyCallback_t s_glfwSetWindowIconifyCallback = LoadFunction<glfwSetWindowIconifyCallback_t>("glfwSetWindowIconifyCallback");
        public static GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow window, GLFWwindowiconifyfun cbfun) => s_glfwSetWindowIconifyCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWframebuffersizefun glfwSetFramebufferSizeCallback_t(GLFWwindow window, GLFWframebuffersizefun cbfun);
        private static glfwSetFramebufferSizeCallback_t s_glfwSetFramebufferSizeCallback = LoadFunction<glfwSetFramebufferSizeCallback_t>("glfwSetFramebufferSizeCallback");
        public static GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow window, GLFWframebuffersizefun cbfun) => s_glfwSetFramebufferSizeCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwPollEvents_t();
        private static glfwPollEvents_t s_glfwPollEvents = LoadFunction<glfwPollEvents_t>("glfwPollEvents");
        public static void glfwPollEvents() => s_glfwPollEvents();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwWaitEvents_t();
        private static glfwWaitEvents_t s_glfwWaitEvents = LoadFunction<glfwWaitEvents_t>("glfwWaitEvents");
        public static void glfwWaitEvents() => s_glfwWaitEvents();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwWaitEventsTimeout_t(double timeout);
        private static glfwWaitEventsTimeout_t s_glfwWaitEventsTimeout = LoadFunction<glfwWaitEventsTimeout_t>("glfwWaitEventsTimeout");
        public static void glfwWaitEventsTimeout(double timeout) => s_glfwWaitEventsTimeout(timeout);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwPostEmptyEvent_t();
        private static glfwPostEmptyEvent_t s_glfwPostEmptyEvent = LoadFunction<glfwPostEmptyEvent_t>("glfwPostEmptyEvent");
        public static void glfwPostEmptyEvent() => s_glfwPostEmptyEvent();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwGetInputMode_t(GLFWwindow window, int mode);
        private static glfwGetInputMode_t s_glfwGetInputMode = LoadFunction<glfwGetInputMode_t>("glfwGetInputMode");
        public static int glfwGetInputMode(GLFWwindow window, int mode) => s_glfwGetInputMode(window, mode);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetInputMode_t(GLFWwindow window, int mode, int value);
        private static glfwSetInputMode_t s_glfwSetInputMode = LoadFunction<glfwSetInputMode_t>("glfwSetInputMode");
        public static void glfwSetInputMode(GLFWwindow window, int mode, int value) => s_glfwSetInputMode(window, mode, value);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate string glfwGetKeyName_t(int key, int scancode);
        private static glfwGetKeyName_t s_glfwGetKeyName = LoadFunction<glfwGetKeyName_t>("glfwGetKeyName");
        public static string glfwGetKeyName(int key, int scancode) => s_glfwGetKeyName(key, scancode);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwGetKey_t(GLFWwindow window, int key);
        private static glfwGetKey_t s_glfwGetKey = LoadFunction<glfwGetKey_t>("glfwGetKey");
        public static int glfwGetKey(GLFWwindow window, int key) => s_glfwGetKey(window, key);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwGetMouseButton_t(GLFWwindow window, int button);
        private static glfwGetMouseButton_t s_glfwGetMouseButton = LoadFunction<glfwGetMouseButton_t>("glfwGetMouseButton");
        public static int glfwGetMouseButton(GLFWwindow window, int button) => s_glfwGetMouseButton(window, button);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwGetCursorPos_t(GLFWwindow window, double* xpos, double* ypos);
        private static glfwGetCursorPos_t s_glfwGetCursorPos = LoadFunction<glfwGetCursorPos_t>("glfwGetCursorPos");
        public static void glfwGetCursorPos(GLFWwindow window, double* xpos, double* ypos) => s_glfwGetCursorPos(window, xpos, ypos);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetCursorPos_t(GLFWwindow window, double xpos, double ypos);
        private static glfwSetCursorPos_t s_glfwSetCursorPos = LoadFunction<glfwSetCursorPos_t>("glfwSetCursorPos");
        public static void glfwSetCursorPos(GLFWwindow window, double xpos, double ypos) => s_glfwSetCursorPos(window, xpos, ypos);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcursor glfwCreateCursor_t(GLFWimage* image, int xhot, int yhot);
        private static glfwCreateCursor_t s_glfwCreateCursor = LoadFunction<glfwCreateCursor_t>("glfwCreateCursor");
        public static GLFWcursor glfwCreateCursor(GLFWimage* image, int xhot, int yhot) => s_glfwCreateCursor(image, xhot, yhot);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcursor glfwCreateStandardCursor_t(int shape);
        private static glfwCreateStandardCursor_t s_glfwCreateStandardCursor = LoadFunction<glfwCreateStandardCursor_t>("glfwCreateStandardCursor");
        public static GLFWcursor glfwCreateStandardCursor(int shape) => s_glfwCreateStandardCursor(shape);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwDestroyCursor_t(GLFWcursor cursor);
        private static glfwDestroyCursor_t s_glfwDestroyCursor = LoadFunction<glfwDestroyCursor_t>("glfwDestroyCursor");
        public static void glfwDestroyCursor(GLFWcursor cursor) => s_glfwDestroyCursor(cursor);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetCursor_t(GLFWwindow window, GLFWcursor cursor);
        private static glfwSetCursor_t s_glfwSetCursor = LoadFunction<glfwSetCursor_t>("glfwSetCursor");
        public static void glfwSetCursor(GLFWwindow window, GLFWcursor cursor) => s_glfwSetCursor(window, cursor);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWkeyfun glfwSetKeyCallback_t(GLFWwindow window, GLFWkeyfun cbfun);
        private static glfwSetKeyCallback_t s_glfwSetKeyCallback = LoadFunction<glfwSetKeyCallback_t>("glfwSetKeyCallback");
        public static GLFWkeyfun glfwSetKeyCallback(GLFWwindow window, GLFWkeyfun cbfun) => s_glfwSetKeyCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcharfun glfwSetCharCallback_t(GLFWwindow window, GLFWcharfun cbfun);
        private static glfwSetCharCallback_t s_glfwSetCharCallback = LoadFunction<glfwSetCharCallback_t>("glfwSetCharCallback");
        public static GLFWcharfun glfwSetCharCallback(GLFWwindow window, GLFWcharfun cbfun) => s_glfwSetCharCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcharmodsfun glfwSetCharModsCallback_t(GLFWwindow window, GLFWcharmodsfun cbfun);
        private static glfwSetCharModsCallback_t s_glfwSetCharModsCallback = LoadFunction<glfwSetCharModsCallback_t>("glfwSetCharModsCallback");
        public static GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow window, GLFWcharmodsfun cbfun) => s_glfwSetCharModsCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWmousebuttonfun glfwSetMouseButtonCallback_t(GLFWwindow window, GLFWmousebuttonfun cbfun);
        private static glfwSetMouseButtonCallback_t s_glfwSetMouseButtonCallback = LoadFunction<glfwSetMouseButtonCallback_t>("glfwSetMouseButtonCallback");
        public static GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow window, GLFWmousebuttonfun cbfun) => s_glfwSetMouseButtonCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcursorposfun glfwSetCursorPosCallback_t(GLFWwindow window, GLFWcursorposfun cbfun);
        private static glfwSetCursorPosCallback_t s_glfwSetCursorPosCallback = LoadFunction<glfwSetCursorPosCallback_t>("glfwSetCursorPosCallback");
        public static GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow window, GLFWcursorposfun cbfun) => s_glfwSetCursorPosCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWcursorenterfun glfwSetCursorEnterCallback_t(GLFWwindow window, GLFWcursorenterfun cbfun);
        private static glfwSetCursorEnterCallback_t s_glfwSetCursorEnterCallback = LoadFunction<glfwSetCursorEnterCallback_t>("glfwSetCursorEnterCallback");
        public static GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow window, GLFWcursorenterfun cbfun) => s_glfwSetCursorEnterCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWscrollfun glfwSetScrollCallback_t(GLFWwindow window, GLFWscrollfun cbfun);
        private static glfwSetScrollCallback_t s_glfwSetScrollCallback = LoadFunction<glfwSetScrollCallback_t>("glfwSetScrollCallback");
        public static GLFWscrollfun glfwSetScrollCallback(GLFWwindow window, GLFWscrollfun cbfun) => s_glfwSetScrollCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWdropfun glfwSetDropCallback_t(GLFWwindow window, GLFWdropfun cbfun);
        private static glfwSetDropCallback_t s_glfwSetDropCallback = LoadFunction<glfwSetDropCallback_t>("glfwSetDropCallback");
        public static GLFWdropfun glfwSetDropCallback(GLFWwindow window, GLFWdropfun cbfun) => s_glfwSetDropCallback(window, cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwJoystickPresent_t(int joy);
        private static glfwJoystickPresent_t s_glfwJoystickPresent = LoadFunction<glfwJoystickPresent_t>("glfwJoystickPresent");
        public static int glfwJoystickPresent(int joy) => s_glfwJoystickPresent(joy);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate float* glfwGetJoystickAxes_t(int joy, int* count);
        private static glfwGetJoystickAxes_t s_glfwGetJoystickAxes = LoadFunction<glfwGetJoystickAxes_t>("glfwGetJoystickAxes");
        public static float* glfwGetJoystickAxes(int joy, int* count) => s_glfwGetJoystickAxes(joy, count);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate byte* glfwGetJoystickButtons_t(int joy, int* count);
        private static glfwGetJoystickButtons_t s_glfwGetJoystickButtons = LoadFunction<glfwGetJoystickButtons_t>("glfwGetJoystickButtons");
        public static byte* glfwGetJoystickButtons(int joy, int* count) => s_glfwGetJoystickButtons(joy, count);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate string glfwGetJoystickName_t(int joy);
        private static glfwGetJoystickName_t s_glfwGetJoystickName = LoadFunction<glfwGetJoystickName_t>("glfwGetJoystickName");
        public static string glfwGetJoystickName(int joy) => s_glfwGetJoystickName(joy);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWjoystickfun glfwSetJoystickCallback_t(GLFWjoystickfun cbfun);
        private static glfwSetJoystickCallback_t s_glfwSetJoystickCallback = LoadFunction<glfwSetJoystickCallback_t>("glfwSetJoystickCallback");
        public static GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun cbfun) => s_glfwSetJoystickCallback(cbfun);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetClipboardString_t(GLFWwindow window, string str);
        private static glfwSetClipboardString_t s_glfwSetClipboardString = LoadFunction<glfwSetClipboardString_t>("glfwSetClipboardString");
        public static void glfwSetClipboardString(GLFWwindow window, string str) => s_glfwSetClipboardString(window, str);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate string glfwGetClipboardString_t(GLFWwindow window);
        private static glfwGetClipboardString_t s_glfwGetClipboardString = LoadFunction<glfwGetClipboardString_t>("glfwGetClipboardString");
        public static string glfwGetClipboardString(GLFWwindow window) => s_glfwGetClipboardString(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate double glfwGetTime_t();
        private static glfwGetTime_t s_glfwGetTime = LoadFunction<glfwGetTime_t>("glfwGetTime");
        public static double glfwGetTime() => s_glfwGetTime();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSetTime_t(double time);
        private static glfwSetTime_t s_glfwSetTime = LoadFunction<glfwSetTime_t>("glfwSetTime");
        public static void glfwSetTime(double time) => s_glfwSetTime(time);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong glfwGetTimerValue_t();
        private static glfwGetTimerValue_t s_glfwGetTimerValue = LoadFunction<glfwGetTimerValue_t>("glfwGetTimerValue");
        public static ulong glfwGetTimerValue() => s_glfwGetTimerValue();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate ulong glfwGetTimerFrequency_t();
        private static glfwGetTimerFrequency_t s_glfwGetTimerFrequency = LoadFunction<glfwGetTimerFrequency_t>("glfwGetTimerFrequency");
        public static ulong glfwGetTimerFrequency() => s_glfwGetTimerFrequency();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwMakeContextCurrent_t(GLFWwindow window);
        private static glfwMakeContextCurrent_t s_glfwMakeContextCurrent = LoadFunction<glfwMakeContextCurrent_t>("glfwMakeContextCurrent");
        public static void glfwMakeContextCurrent(GLFWwindow window) => s_glfwMakeContextCurrent(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWwindow glfwGetCurrentContext_t();
        private static glfwGetCurrentContext_t s_glfwGetCurrentContext = LoadFunction<glfwGetCurrentContext_t>("glfwGetCurrentContext");
        public static GLFWwindow glfwGetCurrentContext() => s_glfwGetCurrentContext();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSwapBuffers_t(GLFWwindow window);
        private static glfwSwapBuffers_t s_glfwSwapBuffers = LoadFunction<glfwSwapBuffers_t>("glfwSwapBuffers");
        public static void glfwSwapBuffers(GLFWwindow window) => s_glfwSwapBuffers(window);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate void glfwSwapInterval_t(int interval);
        private static glfwSwapInterval_t s_glfwSwapInterval = LoadFunction<glfwSwapInterval_t>("glfwSwapInterval");
        public static void glfwSwapInterval(int interval) => s_glfwSwapInterval(interval);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwExtensionSupported_t(string extension);
        private static glfwExtensionSupported_t s_glfwExtensionSupported = LoadFunction<glfwExtensionSupported_t>("glfwExtensionSupported");
        public static int glfwExtensionSupported(string extension) => s_glfwExtensionSupported(extension);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWglproc glfwGetProcAddress_t(string procname);
        private static glfwGetProcAddress_t s_glfwGetProcAddress = LoadFunction<glfwGetProcAddress_t>("glfwGetProcAddress");
        public static GLFWglproc glfwGetProcAddress(string procname) => s_glfwGetProcAddress(procname);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwVulkanSupported_t();
        private static glfwVulkanSupported_t s_glfwVulkanSupported = LoadFunction<glfwVulkanSupported_t>("glfwVulkanSupported");
        public static int glfwVulkanSupported() => s_glfwVulkanSupported();
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate byte** glfwGetRequiredInstanceExtensions_t(uint* count);
        private static glfwGetRequiredInstanceExtensions_t s_glfwGetRequiredInstanceExtensions = LoadFunction<glfwGetRequiredInstanceExtensions_t>("glfwGetRequiredInstanceExtensions");
        public static byte** glfwGetRequiredInstanceExtensions(uint* count) => s_glfwGetRequiredInstanceExtensions(count);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate GLFWvkproc glfwGetInstanceProcAddress_t(IntPtr instance, string procname);
        private static glfwGetInstanceProcAddress_t s_glfwGetInstanceProcAddress = LoadFunction<glfwGetInstanceProcAddress_t>("glfwGetInstanceProcAddress");
        public static GLFWvkproc glfwGetInstanceProcAddress(IntPtr instance, string procname) => s_glfwGetInstanceProcAddress(instance, procname);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwGetPhysicalDevicePresentationSupport_t(IntPtr instance, IntPtr device, uint queuefamily);
        private static glfwGetPhysicalDevicePresentationSupport_t s_glfwGetPhysicalDevicePresentationSupport = LoadFunction<glfwGetPhysicalDevicePresentationSupport_t>("glfwGetPhysicalDevicePresentationSupport");
        public static int glfwGetPhysicalDevicePresentationSupport(IntPtr instance, IntPtr device, uint queuefamily) => s_glfwGetPhysicalDevicePresentationSupport(instance, device, queuefamily);
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        private delegate int glfwCreateWindowSurface_t(IntPtr instance, GLFWwindow window, IntPtr allocator, void* surface);
        private static glfwCreateWindowSurface_t s_glfwCreateWindowSurface = LoadFunction<glfwCreateWindowSurface_t>("glfwCreateWindowSurface");
        public static int glfwCreateWindowSurface(IntPtr instance, GLFWwindow window, IntPtr allocator, void* surface) => s_glfwCreateWindowSurface(instance, window, allocator, surface);
    }
}
